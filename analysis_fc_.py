# -*- coding: utf-8 -*-
"""ANALYSIS FC .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tSbCkr5hwGVw6C5fUg-eGURQA1O_IXVz

**Traditional approach**
"""

import pandas as pd
from google.colab import files


uploaded_files = files.upload()

import pandas as pd
from google.colab import files


uploaded_files = files.upload()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'tp_1.xlsx'
df = pd.read_excel(file_path)

# Replace null values with 0 for specified attributes
attributes_to_replace = ['IN', 'EX', 'TO', 'RE']
df[attributes_to_replace] = df[attributes_to_replace].fillna(0)

# Calculate average marks for each gender
average_marks_by_gender = df.groupby('GENDER')['TO'].mean().reset_index()

# Plot a bar chart
plt.figure(figsize=(8, 5))
plt.bar(average_marks_by_gender['GENDER'], average_marks_by_gender['TO'], color=['skyblue', 'lightcoral'])
plt.title('Average Marks Scored by Gender')
plt.xlabel('Gender')
plt.ylabel('Average Marks')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'tp.xlsx'
df = pd.read_excel(file_path)

# Replace null values with 0 for specified attributes
attributes_to_replace = ['IN', 'EX', 'TO', 'RE']
df[attributes_to_replace] = df[attributes_to_replace].fillna(0)

# Calculate the overall average of the 'TO' column
average_to = df['TO'].mean()

# Display the average
print(f"Overall Average of 'TO' column: {average_to}")

import pandas as pd

# Load the dataset
file_path = 'tp.xlsx'
df = pd.read_excel(file_path)

# Replace null values with 0 for specified attributes
attributes_to_replace = ['IN', 'EX', 'TO', 'RE']
df[attributes_to_replace] = df[attributes_to_replace].fillna(0)

# Count the number of values in the 'TO' column below 5
count_below_5 = df[df['TO'] < 50]['TO'].count()

# Display the count
print(f"Number of values in 'TO' column below 50: {count_below_5}")

"""**FLIPPED CLASSROOM APPROACH**"""

import pandas as pd

# Load the dataset
file_path = 'pre.csv'
df = pd.read_csv(file_path)

# Remove rows where 'Test_Type' is 0
df = df[df['Test_Type'] != 0]

# Save the modified dataset
df.to_csv('pre_modified.csv', index=False)

import pandas as pd
import matplotlib.pyplot as plt

# Load the modified dataset (previously saved as 'pre_modified.csv')
file_path = 'pre_modified.csv'
df = pd.read_csv(file_path)

# Map Test_Type values to corresponding names
test_type_mapping = {1: 'Processmanage', 2: 'processsyncro', 3: 'Deadlock', 4: 'File', 5: 'memory'}
df['Test_Type_Name'] = df['Test_Type'].map(test_type_mapping)

# Group by 'Test_Type_Name' and calculate the average score for each group
average_score_by_test_type = df.groupby('Test_Type_Name')['Average Score'].mean().reset_index()

# Plot a bar chart
plt.bar(average_score_by_test_type['Test_Type_Name'], average_score_by_test_type['Average Score'], color='skyblue')
plt.title('Average Score for Each Test Type')
plt.xlabel('Test Type')
plt.ylabel('Average Score')
plt.show()



import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'posttest_final01.csv'
df = pd.read_csv(file_path)

# Map Test_Type values to corresponding names
test_type_mapping = {'PostTest2': 'Process sync', 'PostTest3': 'Deadlock', 'PostTest4': 'File', 'PostTest5': 'Memory'}
df['Test_Type_Name'] = df['test_type'].map(test_type_mapping)

# Group by 'Test_Type_Name' and calculate the sum for each group
sum_by_test_type = df.groupby('Test_Type_Name')[['Sum_Level1', 'Sum_Level2', 'Sum_Level3']].sum().reset_index()

# Filter out 'File' category for Level 3
sum_by_test_type_level3 = sum_by_test_type[sum_by_test_type['Test_Type_Name'] != 'File']

# Plot three separate bar charts for each difficulty level
fig, axes = plt.subplots(3, 1, figsize=(10, 15))

# Plot for Sum_Level1
axes[0].bar(sum_by_test_type['Test_Type_Name'], sum_by_test_type['Sum_Level1'], color='purple', label='Sum_Level1')
axes[0].set_title('Sum of Level 1 based on Test Type')
axes[0].set_xlabel('Test Type')
axes[0].set_ylabel('Sum_Level1')
axes[0].legend()

# Plot for Sum_Level2
axes[1].bar(sum_by_test_type['Test_Type_Name'], sum_by_test_type['Sum_Level2'], color='pink', label='Sum_Level2')
axes[1].set_title('Sum of Level 2 based on Test Type')
axes[1].set_xlabel('Test Type')
axes[1].set_ylabel('Sum_Level2')
axes[1].legend()

# Plot for Sum_Level3 without 'File'
axes[2].bar(sum_by_test_type_level3['Test_Type_Name'], sum_by_test_type_level3['Sum_Level3'], color='skyblue', label='Sum_Level3')
axes[2].set_title('Sum of Level 3 based on Test Type (excluding File)')
axes[2].set_xlabel('Test Type')
axes[2].set_ylabel('Sum_Level3')
axes[2].legend()

# Adjust layout
plt.tight_layout()

# Show the plots
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'posttest_final01.csv'
df = pd.read_csv(file_path)

# Map Test_Type values to corresponding names
test_type_mapping = {'PostTest2': 'Process sync', 'PostTest3': 'Deadlock', 'PostTest4': 'File', 'PostTest5': 'Memory'}
df['Test_Type_Name'] = df['test_type'].map(test_type_mapping)

# Group by 'Test_Type_Name' and calculate the sum for each group
sum_by_test_type = df.groupby('Test_Type_Name')[['Sum_Level1', 'Sum_Level2', 'Sum_Level3']].sum().reset_index()

# Filter out 'File' category for Level 3
sum_by_test_type_level3 = sum_by_test_type[sum_by_test_type['Test_Type_Name'] != 'File']

# Plot three separate line charts for each difficulty level
fig, axes = plt.subplots(3, 1, figsize=(10, 15))

# Line plot for Sum_Level1
axes[0].plot(sum_by_test_type['Test_Type_Name'], sum_by_test_type['Sum_Level1'], marker='o', color='purple', label='Sum_Level1')
axes[0].set_title('Sum of Level 1 based on Test Type')
axes[0].set_xlabel('Test Type')
axes[0].set_ylabel('Sum_Level1')
axes[0].legend()

# Line plot for Sum_Level2
axes[1].plot(sum_by_test_type['Test_Type_Name'], sum_by_test_type['Sum_Level2'], marker='o', color='pink', label='Sum_Level2')
axes[1].set_title('Sum of Level 2 based on Test Type')
axes[1].set_xlabel('Test Type')
axes[1].set_ylabel('Sum_Level2')
axes[1].legend()

# Line plot for Sum_Level3 without 'File'
axes[2].plot(sum_by_test_type_level3['Test_Type_Name'], sum_by_test_type_level3['Sum_Level3'], marker='o', color='skyblue', label='Sum_Level3')
axes[2].set_title('Sum of Level 3 based on Test Type (excluding File)')
axes[2].set_xlabel('Test Type')
axes[2].set_ylabel('Sum_Level3')
axes[2].legend()

# Adjust layout
plt.tight_layout()

# Show the plots
plt.show()

import pandas as pd

# Load the Excel file
excel_file_path = 'openchal.xlsx'  # Replace with the actual path to your Excel file
df = pd.read_excel(excel_file_path)

# Save the DataFrame to a CSV file
csv_file_path = 'OC.csv'  # Replace with the desired output path for the CSV file
df.to_csv(csv_file_path, index=False)

print("Conversion complete. CSV file saved at:", csv_file_path)

import pandas as pd

# Load the CSV file
csv_file_path = 'OC.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Print the column names to identify the correct column
print("Column names:", df.columns)

# Assuming the column names are printed, update the column name in the code
column_name = 'Open Challenge'  # Replace with the correct column name

# Check if the column exists in the DataFrame
if column_name in df.columns:
    # Calculate the average of the specified column
    average_value = df[column_name].mean()
    print(f"Average of {column_name}: {average_value}")
else:
    print(f"Column '{column_name}' not found in the DataFrame.")

import pandas as pd

# Load the CSV file
csv_file_path = 'OC.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Calculate the average of the 'Open Challenge' column
average_open_challenge = df['Open \nChallenge\n'].mean()

# Calculate the average of the 'Flipped Class' column
average_flipped_class = df['Flipped Class\n'].mean()

# Print the averages
print("Average of Open Challenge:", average_open_challenge)
print("Average of Flipped Class:", average_flipped_class)

import pandas as pd

# Assuming the uploaded file is named 'openchal.xlsx'
excel_file_path = 'openchal.xlsx'

# Read Excel file
df = pd.read_excel(excel_file_path)

# Convert to CSV and save
csv_file_path = 'openchal.csv'
df.to_csv(csv_file_path, index=False)

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
csv_file_path = 'openchal.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Print the column names to verify the exact names
print(df.columns)

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
csv_file_path = 'openchal.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Calculate the average of the 'Open Challenge' column
average_open_challenge = df['Open \nChallenge\n'].mean()

# Calculate the average of the 'Flipped Class' column
average_flipped_class = df['Flipped Class\n'].mean()

# Corrected column name with the trailing space
average_tutorial = df['Tutorial '].mean()

# Create a line graph
categories = ['Open Challenge', 'Flipped Class', 'Tutorial']
averages = [average_open_challenge, average_flipped_class, average_tutorial]

plt.plot(categories, averages, marker='o', linestyle='-', color='b')
plt.ylim(0, 10)  # Assuming the values are out of 10 for the 'Tutorial' column
plt.ylabel('Average Score')
plt.title('Average Scores for Open Challenge, Flipped Class, and Tutorial')
plt.grid(True)
plt.show()

import pandas as pd

# Load the CSV file
csv_file_path = 'opfinal_dataset.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Calculate the average of the 'FinalOS' column
average_final_os = df['FinalOS'].mean()

# Print the average
print("Average of FinalOS:", average_final_os)

import pandas as pd

# Load the CSV file
csv_file_path = 'opfinal_dataset.csv'  # Replace with the actual path to your CSV file
df = pd.read_csv(csv_file_path)

# Count the number of people with 'FinalOS' scores above 5
above_5_count = df[df['FinalOS'] > 5].shape[0]

# Print the count
print("Number of people with 'FinalOS' scores above 5:", above_5_count)

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'tp.xlsx'
df = pd.read_excel(file_path)

# Replace null values with 0 for specified attributes
attributes_to_replace = ['IN', 'EX', 'TO', 'RE']
df[attributes_to_replace] = df[attributes_to_replace].fillna(0)

# Count the number of values in the 'TO' column below 50
count_below_50 = df[df['TO'] < 50]['TO'].count()

# Display the count
print(f"Number of values in 'TO' column below 50: {count_below_50}")

# Load the CSV file
csv_file_path = 'opfinal_dataset.csv'
df_opfinal = pd.read_csv(csv_file_path)

# Count the number of people with 'FinalOS' scores above 5
above_5_count = df_opfinal[df_opfinal['FinalOS'] < 5].shape[0]

# Display the count
print("Number of people with 'FinalOS' scores above 5:", above_5_count)

# Plot the counts
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Plot for 'TO' column below 50
ax1.bar(['Traditional'], [count_below_50], color='skyblue', label='Traditional')
ax1.set_ylabel('Count')
ax1.set_title('Number of values in \'TotalOS\' column below 50')
ax1.legend()

# Plot for 'FinalOS' scores above 5
ax2.bar(['Flipped'], [above_5_count], color='lightcoral', label='Flipped')
ax2.set_ylabel('Count')
ax2.set_title('Number of people with \'FinalOS\' scores below 5')
ax2.legend()

# Show the plots
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'tp.xlsx'
df = pd.read_excel(file_path)

# Replace null values with 0 for specified attributes
attributes_to_replace = ['IN', 'EX', 'TO', 'RE']
df[attributes_to_replace] = df[attributes_to_replace].fillna(0)

# Count the number of values in the 'TO' column equal to 90
count_equal_90 = df[df['TO'] == 90]['TO'].count()

# Display the count
print(f"Number of values in 'TO' column equal to 90: {count_equal_90}")

# Load the CSV file
csv_file_path = 'opfinal_dataset.csv'
df_opfinal = pd.read_csv(csv_file_path)

# Count the number of people with 'FinalOS' scores equal to 9
equal_9_count = df_opfinal[df_opfinal['FinalOS'] == 9].shape[0]

# Display the count
print("Number of people with 'FinalOS' scores equal to 9:", equal_9_count)

# Plot the counts
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Plot for 'TO' column equal to 90
ax1.bar(['Traditional'], [count_equal_90], color='skyblue', label='Traditional')
ax1.set_ylabel('Count')
ax1.set_title('Number of values in \'TotalOS\' column equal to 90')
ax1.legend()

# Plot for 'FinalOS' scores equal to 9
ax2.bar(['Flipped'], [equal_9_count], color='lightcoral', label='Flipped')
ax2.set_ylabel('Count')
ax2.set_title('Number of people with \'FinalOS\' scores equal to 9')
ax2.legend()

# Show the plots
plt.tight_layout()
plt.show()